给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
（你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍）
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

1.很直接的暴力解法
for(int i=0;i<len;i++){
      for(int j=i;j<len;j++){
            if(nums[i]+nums[j]==target)   
      }
//vector也提供了find函数vector<int>::iterator i1=find(nums.begin()+i+1,nums.end(),target-nums[i]);
}
2.双指针
while(i<j){
       if(nums[i]<target-nums[j])
          i++;
       if(nums[j]>target-nums[i])
          j--;
}
3,哈希表,
map<int,int>hashmap
for(int i=0;i<len;i++){
     if（hashmap(target-nums[i]){
         ans.pushback(i);
         ans.pushback(hashmap(target-nums[i])-1) ;
     }
     hashmap[nums[i]]=i+!;
}
map对于存在重复元素的情况不适用，因为本题限制了仅有一个解。
而且这个解法利用了hashmap()返回空判断，返回0会冲突所以将下标都+1.
